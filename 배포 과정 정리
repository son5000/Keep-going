# 큰 단락의 서버 배포과정

## 1.어디서 배포할 것인가?(어떤 서비스를 이용해서 배포할 것인가)

AWS의 서비스를 이용해서 배포

1. AWS ROOT계정 생성 ⇒ MPA 등 보안 설정
2. IAM 서비스로  IAM admin 계정 생성 ( ROOT 계정에서 내려준 특정 권한만을 가지는 계정)

## 2.어떤 모델을 사용해서 배포할 것인가?

Elastic beanstalk 와 EC2 중에 고민하다 EC2를 활용.

처음 AWS를 공부해보는 나에게 있어 EC2를 활용해보는것이 조금 더 베이직한 선택지이며

기본을 터득하는데 도움이 될 것이라 판단.

1. AWS 의 대표적인 인스턴스들을 공부.
    
    수많은 모델들이 있지만 가장 널리 알려져있고 기본적인 모델들 개념 공부
    
    - EC2
    - S3
    - RDS
    - Elastic beanstalk
1. **EC2 인스턴스 생성**
    1. SSH를 통해서 AWS console에서 nginx 설치
        1. nginx에 대해서 아직 깊게는 모르지만 내가 렌탈한 컴퓨터를 서버컴퓨터로서 
            
            기능을 할 수 있게 설정해주는 프로그램인것 같다.
            
    
     b. node 설치 및 git clone 을 이용해서 기존 express 서버 파일 clone 해서 복사
    
    1. 이 과정을 원래는 파일질라를 통해서 했었는데 파일질라가 눈에 직관적으로 보이는 
        
        인터페이스 UI가 있다는 거 말고는 나는 차이를 잘 모르겠다. 
        
        더 디테일한 좋은 부분이 있겠지만 git clone으로 해결 한것 같다.
        
2. **탄력적 ip  발급**
    1. EC2 는 기본적으로 인스턴스를 재가동 할 때마다 IP주소가 재할당 된다.
        
        즉 값이 바뀐다는 것이다. 하지만 내가 목표하는 바는 프론트서버에서
        
        고정적인 값을 활용해서 리소스요청을 보내야 하기 때문에 이는 옳지 못하다.
        
        그래서 탄력적 IP라고 하는 고정 값의  IP 주소 값을 발급 받았다. 
        
3. **nginx 와 express의 관계**
    1. 리버스 프록시를 사용해 nginx 에게 먼저 요청이 들어오고 그 요청을 다시
        
        express서버에게 nginx 가 보낸다. 
        
        이렇게 하는 이유는 크게 보안강화와 분산요청처리, 캐싱, 리디렉션에 이유가 있다.
        

6.**Mixed Content**

1. 프론트 서버가 https 로 배포가 되어있어서 인바운드 규칙에  https 를 허용했지만
    
    백엔드 서버는 기본적으로 http환경으로 배포가 되어있기때문에 
    
    추가 설정이 필요하다.
    

1. **SSL** 
    1. Let's Encrypt 를 통해 SSL인증서를 무료로 발급 받고 이를 nginx에 적용시켜
        
        https환경으로 맞춰준다.
        

1. **DNS 설정 ( 도메인 발급 ⇒ 가비아 )**
    1. SSL설정과정에서 퍼블릭 IP주소가 아닌 도메인이 필요했기에
        
        AWS Route 53 에서 DNS설정을 해줬다. 
        
        DNS설정이란 퍼블릭IP를 도메인으로 연결하는 과정도 포함한다.
        
    2. 도메인이 필요했기 때문에 가비아 서비스를 이용해서 
        
        [backend-sonhanje.store](http://backend-sonhanje.store) 라는 이름으로 도메인을 발급했다.
        
        store를 사용한 이유는 제일 가격이 쌌기 때문이다. ( 500원 1년 )
