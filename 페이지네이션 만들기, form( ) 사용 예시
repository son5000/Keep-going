## 코드리뷰

### 필요한 변수 선언

**MAXIMUM** ⇒ 페이지당 보여줄 게시물의 갯수는 10로 정해져있기 때문에 절대값으로 표현 

현재 페이지를 나타내는 state 를 생성

데이터의 총량을 파악하는 total변수 생성

pageNation 배열을 만들 state 생성.

```jsx
   // 페이지당 보여지는 게시물 최대 게시물 개수
    const MAXIMUM = 10;
    // 현재페이지 번호 1로 현재페이지를 나타내는 state 생성
    const [currentPage, setCurrentPage] = useState(1);
    // total  =  데이터의 총 개수 => 데이터의 총 개수에 따라서 pageNation이 달라진다.
    const [total , setTotal ] =  useState(0);
    // 페이지네이션 생성을 위한 state
    const [pageNation , setPageNation] = useState(null)
    // 마지막 페이지네이션 count
    const lastPage = Math.ceil(total / 10);
    
    const [data ,setData]  = useState(null);
```

### API 호출

***주요기능**

토탈 게시물수의 / 10 을 math.ceil 을 사용해서 올림 ( 51개라고 가정했을때 페이지네이션의 갯수는6

최초의 페이지네이션만을 설정해주기 때문에 삼항 연산자를 사용해서 

1~5번을 나타내는 pageNation을 생성.

올림을 진행한 값이 5보다 클 경우 5를 return (  페이지네이션은 5단위로 끊어진다.)

5보다 작을경우 올림한 값을 return ( 1, 2, 3, 4)

from 메소드를 사용해서 배열에 값을 곧바로 넣어 주면서 배열을 생성.

첫번째 인자로 { length : value } ,  두번째 인자(  반영할 값을 리턴하는 콜백함수)

```jsx
setPageNation(Array.from({ length: Math.ceil(total / 10) > 5 ? 5 : Math.ceil(total / 10) }, (_, index) => index + 1));
```

```jsx
    useEffect(() => {
        const fetchData = async () => {
          try {
            const res = await fetch(`http://localhost:5000/post/List?type=${type}&offset=${(currentPage - 1) * MAXIMUM}&count=${MAXIMUM}`);
            if (!res.ok) {
              throw new Error('서버로부터 데이터를 불러오는데 실패했습니다.');
            }
            const data = await res.json();
            setData(data.posts); 
            setTotal( data.totalPostCount)
            // 현재페이지 번호가 6보다 작을 경우의 pageNation 배열 생성 6 <= current 경우는 next함수에서 새로운 배열 생성
            if(currentPage < 6){
							setPageNation(Array.from({ length: Math.ceil(total / 10) > 5 ? 5 : Math.ceil(total / 10) }, (_, index) => index + 1));
            }
          } catch (error) {
            alert(error.message);  
            navigate('/');  
          }
        };
        
        fetchData();
    }, [navigate, type, currentPage, total]);
```

### 버튼 함수 정의

**prev btn :** 현재페이지가 1번 이라면 곧바로 return 함수 탈출.

기본적으로 현재페이지를 -1해준다.

현재페이지를 5로 나눈 나머지가 1일때 ex) 6, 11, 16…

일 때 페이지네이션의 요소의 배열들의 값이 달라져야하기 때문에 마찬가지로 

from메소드를 사용해서 배열의 값 변경.

**next btn :** lastpage 마지막페이지의 값을 미리 구해 변수로 저장해두었다.

해당값일 때 ‘마지막 페이지입니다.’라는 문구의 오류창을 띄운다.

그 외의 로직은 prevbtn 과 같다

**그런데 여기서 ***

의문이 드는 부분이 prev버튼은 currentPage % 5 === 1 나머지가 1인경우가 적용되고

next 버튼은 currentPage % 5 === 0  나머지가 0인 5의 배수일 때 배열을 재생성하니까

제대로 적용이 됐다. 서로 렌더링이 되는 타이밍? 변수의 값 변화 타이밍 ?이 다른거 같다,

아직 이유를 잘 모르겠다.

```jsx
    const handlePrevPage = () => {
        if(currentPage === 1)return;
        setCurrentPage(currentPage - 1);
        if ( currentPage % 5 === 1 ) {
            const newPageNation = Array.from(
              { length: 5 },
              (_, index) =>  currentPage - index -1
            ).reverse();
            setPageNation(newPageNation);
        }
    }
    const handleNextPage = () => {
        if(currentPage === lastPage) return alert('마지막 페이지입니다.') ;
        setCurrentPage(currentPage + 1);
        if (currentPage % 5 === 0) {
            const newPageNation = Array.from(
              { length: 5 < Math.ceil((total - (currentPage) * MAXIMUM) / MAXIMUM) ? 5 : Math.ceil((total - (currentPage) * MAXIMUM) / MAXIMUM) },
              (_, index) => index + currentPage + 1
            );
            setPageNation(newPageNation);
        }
    }
```
