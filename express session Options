1. secret
역할: 세션 ID를 암호화하기 위한 키를 설정.
기능:
세션 ID를 클라이언트 쿠키에 저장할 때 HMAC(해시 기반 메시지 인증 코드)을 사용하여 암호화.
외부에서 세션 ID를 위조하지 못하도록 보호.
반드시 복잡하고 예측 불가능한 값을 사용해야 함.

secret: 'your-secret-key'

2. resave
역할: 세션 데이터에 변경 사항이 없어도 세션을 다시 저장할지 여부를 설정.
기능:
true: 요청마다 세션을 다시 저장. (낮은 성능)
false: 세션이 변경된 경우에만 저장. (권장)

resave: false

3. saveUninitialized
역할: 초기화되지 않은 세션(데이터가 없는 세션)을 저장할지 결정.
기능:
true: 세션에 데이터가 없더라도 서버에 저장.
트래픽이 많은 환경에서는 비효율적일 수 있음.
데이터가 없는 상태에서도 저장되므로 GDPR 등 규정을 준수하기 어려울 수 있음.
false: 데이터를 추가하기 전까지 저장하지 않음. (권장)

saveUninitialized: false

4. cookie
역할: 세션 쿠키의 동작 방식을 설정.
기능:
secure: true로 설정하면 HTTPS에서만 쿠키 전송.
httpOnly: true로 설정하면 JavaScript로 쿠키 접근 불가.
maxAge: 쿠키의 만료 시간을 설정 (밀리초 단위).
sameSite: 쿠키의 SameSite 정책 설정 (strict, lax, none).

cookie: {
  secure: false,         // HTTPS 필요 여부
  httpOnly: true,        // JavaScript로 접근 불가
  maxAge: 60000,         // 쿠키 만료 시간 (1분)
  sameSite: 'lax'        // SameSite 정책
}

5. store
역할: 세션 데이터를 저장할 스토리지 설정.
기능:
기본적으로 메모리에 저장(MemoryStore). 단, 프로덕션 환경에서는 외부 스토리지를 사용해야 함.
Redis, MongoDB, MySQL, PostgreSQL 등과 통합 가능.
데이터베이스를 사용하면 서버 재시작에도 세션 유지 가능.

const RedisStore = require('connect-redis')(session);
store: new RedisStore({ client: redisClient })

6. rolling
역할: 세션 만료 기간을 매 요청마다 갱신할지 설정.
기능:
true: 사용자가 서버에 요청할 때마다 쿠키의 만료 시간을 연장.
false: 쿠키가 처음 설정된 이후 만료 시간이 갱신되지 않음.

rolling: true

7. unset
역할: 세션이 삭제될 때의 동작을 설정.
기능:
destroy: 세션 삭제 시 서버에서 세션 데이터를 완전히 제거.
keep: 세션을 삭제하더라도 데이터는 유지.

unset: 'destroy'

app.use(
  session({
    secret: 'my-secret-key',         // 암호화 키
    resave: false,                   // 변경된 세션만 저장
    saveUninitialized: false,        // 초기 세션 저장 방지
    cookie: {
      secure: false,                 // HTTP에서도 전송 허용 (개발 시)
      httpOnly: true,                // JS로 쿠키 접근 차단
      maxAge: 1000 * 60 * 60 * 24    // 1일 동안 유지
    },
    store: new RedisStore({          // 외부 스토리지 사용 (예: Redis)
      client: redisClient
    }),
    rolling: true,                   // 요청 시마다 만료 시간 갱신
    unset: 'destroy'                 // 세션 제거 시 데이터도 삭제
  })
);


정리
보안을 강화하려면 secret, cookie.secure, cookie.httpOnly를 신경 써야 함.
성능을 고려하려면 resave, saveUninitialized, store를 최적화해야 함.
유연성을 위해 Redis 같은 외부 스토리지를 활용하는 것이 좋다.





