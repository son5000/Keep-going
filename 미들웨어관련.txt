## 벨리데이션 오류  관련. (서버가 죽음)

비동기 작업을 처리하는 과정에서 오류가 발생하면 생긴다.

예를 들어 유효하지않는  url 을 서버로 전달한다든가..

**try catch 문 활용 :**  비동기 작업중 오류가 생겼을때 error 가 발생하는 상황을 고려하기 않고

코드를 진행하면 error 가 발생했을때 서버가 죽어버리는 이슈가 생긴다.

try catch 문을 활용한 비동기 함수 장치를 따로 작성.

다음의 asyncHandler 함수는 파라미터로 비동기 함수를 받는다.

return 값을 다시 비동기로 파라미터로 받은 함수를 작동한다 ⇒ 

**이때 try catch 문을 활용해서 error  의 name 프로퍼티로 접근하여 error 의 종류를** 

**파악하고 그에맞는 status 를 retrun 해준다.**

**여기서 포인트 asyncHandler 함수도 비동기로 처리하는 이유!**

파라미터로 넘겨준 함수가 비동기 함수 이기때문에 , 물론 비동기 함수가 아니더라도

넘겨준 함수의 결과 값을 기다리고 그 결과값을 토대로 try catch 문을 실행해야 하기 때문에

2중 비동기 함수의 모양이 나오는 것이다.

**다음함수에 대한 설명 ⇒**

asyncHandler 는 서버에 ./tasks 같은 URL 경로로 요청들이 들어왔고 그에 대한 response 응답

을 해주는 **라우터를 처리하기 전에 실행하는 “미들웨어”가 된다.**

다음 코드는 라우터를 실행하기전에 asyncHandler 를 비동기 방식으로 실행하여 

그다음 라우터를 비동기로 실행하고 라우터의 결과 값을 받아 오류가있는지 확인하는 코드가 된다.

즉 ⇒ res 를 돌려주기 전에 오류를 검사하는 장치를 실행하는 것이니 **이것은 미들웨어가 된다.**


function asyncHandler(handler) {
    return async function (req, res) {
        try  {
            await handler(req ,res);
        } catch (error) {
            if(error.name === 'ValidationError') {
                res.status(400).send({message : error.message});
            }else if(error.name === 'CastError'){
                res.status(404).send({message : 'Cannot find given id.'});
            }else{
                res.status(500).send({message : error.message});
            }
        }
    }
}
app.get('/tasks' , asyncHandler( async (req , res) => { 
    const sort = req.query.sort;
    const count = Number(req.query.count) || 0;
    const sortOption = {created : sort === 'oldest' ? 'asc' : 'desc'};
    const tasks = await Task.find().sort(sortOption).limit(count);
    res.send(tasks);
}))
