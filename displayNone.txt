`display: none`은 요소를 시각적으로 숨기고 레이아웃에서 제거하지만, 메모리 내에서는 여전히 존재하므로 메모리 사용에 영향을 미칠 수 있습니다. 따라서 많은 수의 요소를 다룰 때는 이러한 점을 고려하는 것이 좋습니다. 필요에 따라 요소를 완전히 제거하거나, 관리할 수 있는 방법을 선택하는 것이 바람직합니다.

## display : none 일때 요소노드는 어떤 모습인가 ?

### 1. **요소가 화면에 보이지 않음**

- `display: none`을 적용하면 해당 요소는 화면에 표시되지 않습니다. 즉, 사용자에게는 전혀 보이지 않는 상태가 됩니다.
- 이 상태에서는 해당 요소의 모든 자식 요소들도 마찬가지로 화면에 나타나지 않습니다.

### 2. **문서의 레이아웃에서 제거됨**

- `display: none`이 적용된 요소는 레이아웃에서 완전히 제거됩니다. 이 말은, 이 요소가 차지하던 공간이 문서의 흐름에서 사라진다는 뜻입니다.
- 예를 들어, 이 요소가 어떤 공간을 차지하고 있었다면, 그 공간은 다른 요소들이 그 자리를 차지하게 됩니다.

### 3. **DOM의 구조와 상태 유지**

- 요소가 `display: none`으로 설정되어도 DOM에서는 여전히 존재합니다. 즉, 자바스크립트에서 해당 요소를 참조하거나 조작할 수 있습니다.
- 상태를 유지하고 있으므로, 나중에 `display: block` 또는 다른 적절한 display 값으로 다시 설정하면 다시 화면에 표시됩니다.

### 4. **이벤트와 상호작용**

- `display: none` 상태에서는 해당 요소가 클릭, 호버 등과 같은 사용자 이벤트를 수신하지 않습니다. 요소가 보이지 않기 때문에 사용자는 그 위에 마우스를 올리거나 클릭할 수 없습니다.
- 요소가 다시 표시될 때, 해당 요소에 바인딩된 이벤트 핸들러는 여전히 활성 상태입니다. 예를 들어, 요소가 다시 표시될 때 버튼 클릭 이벤트가 정상적으로 작동합니다.

### 5. **CSS 선택자와 스타일 적용**

- `display: none`이 적용된 요소는 CSS 선택자에 의해 스타일이 적용될 수는 있지만, 화면에 표시되지 않기 때문에 그 효과를 볼 수 없습니다.
- 즉, 다른 스타일 속성 (예: `background-color`, `border` 등)은 여전히 적용될 수 있지만, 화면에 보이지 않기 때문에 효과를 확인할 수는 없습니다.

### 요약

- `display: none`을 설정하면 요소는 보이지 않으며 레이아웃에서도 제거되지만, DOM에는 남아있고, 자바스크립트로 접근하거나 조작할 수 있습니다.
- 이벤트를 수신하지 않으며, 스타일은 적용될 수 있으나 보이지 않습니다.

이러한 특성을 이해하는 것은 웹 개발에서 요소의 가시성 및 상호작용을 조정할 때 매우 유용합니다!

### 메모리와 DOM

1. **DOM 노드 존재**: `display: none`이 적용된 요소는 DOM에서 제거되지 않기 때문에, 메모리 내에서 해당 요소에 대한 정보가 여전히 유지됩니다. 즉, 요소의 속성, 자식 노드, 이벤트 핸들러 등 모든 정보가 메모리에 남아 있습니다.
2. **메모리 사용량**: 이 상태에서 메모리 사용량이 증가할 수 있습니다. 특히, DOM이 크고 복잡할수록 각 요소가 차지하는 메모리 용량도 커지므로, 많은 요소가 `display: none` 상태일 경우 메모리 소비가 증가할 수 있습니다.
3. **가비지 컬렉션**: 자바스크립트의 가비지 컬렉터는 사용되지 않는 메모리를 회수하는 역할을 합니다. 그러나 DOM 노드가 여전히 참조되고 있는 한, 그 요소는 가비지 컬렉션의 대상이 되지 않습니다. 즉, DOM에서 제거되지 않으면 해당 요소는 메모리에서 해제되지 않습니다.

### 메모리 관리

- **성능 고려**: 만약 많은 요소를 `display: none`으로 설정한 상태로 두게 되면, 성능에 영향을 미칠 수 있습니다. 특히, 이러한 요소가 많을 경우 렌더링과 관련된 작업이 느려질 수 있습니다.
- **대체 방법**: 필요 없는 요소를 완전히 제거하고 싶다면, `removeChild()`나 `innerHTML`을 사용하여 DOM에서 삭제하는 것이 좋습니다. 이렇게 하면 해당 요소가 메모리에서도 해제되어 메모리 소비를 줄일 수 있습니다.