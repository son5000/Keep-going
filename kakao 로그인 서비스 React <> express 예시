REST API 방식

1. 카카오 디벨로퍼에서 어플리케이션 등록 및 간단한 절차를 진행 
    1. 어플리케이션 등록
    2. 리다이렉션 url 등록 ( 서비스 이용자가 로그인시에 인가코드를 받을 url ) 
        1. 나의 경우 컴포넌트를 하나 만들어서 거기서 받고 데이터가 pomise 값을 받을 때 까진
            
            로그인 로딩 화면을 띄울 예정이다. 결론 엔드포인트 하나 만들어준다.
            
    3. Rest_api_key 를 가져온다. (프론트 로그인 페이지)
        
        Rest_api_key ( 디벨로퍼 페이지에서 ) 
        
        redirect_uri (  마찬가지로 디벨로퍼 페이지에서 등록한 url )
        
        kakaoURL ( 아래 코드의 형식으로 작성)
        
        window.location.href = kakaoURL 함수를 통해 접근
        
        ```jsx
        
        const Kakao = () =>
            {
                const Rest_api_key='458b4fe6ffff263f6868c1ce53e45011' 
                //REST API KEY
                const redirect_uri = 'http://localhost:3000/kakao/redirection'
                 //Redirect URI
                const kakaoURL = `https://kauth.kakao.com/oauth/authorize?client_id=${Rest_api_key}&redirect_uri=${redirect_uri}&response_type=code`
                // oauth 요청 URL
                const handleLogin = ()=>{
                    window.location.href = kakaoURL
                }
                return(
                <>
                <button onClick={handleLogin}>카카오 로그인</button>
                </>
                )
            }
        ```
        

리다이렉션 페이지로 이동 

미리 만들어둔 컴포넌트에서 url로 받은 인가코드를 백엔드 서버로 보내는 과정

1. useLocation 을 사용해서 url 의 인가코드를 추출
2. REST API 작성 
    1. 바디로 값을 보낸다 .

```jsx
export default function Redirection ()  {
    const location = useLocation();
    const navigate = useNavigate();
    const backendUrl = process.env.REACT_APP_BACKEND_URL;
    const ACCESS_KEY = location.search.split('=')[1]
    console.log(ACCESS_KEY);
    useEffect(()=> {
        const kakaoLoginToBackend = async () => {
            try {
                const response = await fetch(`${backendUrl}/user/loginkakao`,{
                    method : 'POST',
                    headers : {
                        "Content-Type" : "application/json",
                    },
                    body : JSON.stringify({ACCESS_KEY})
                })
                const data = await response.json();
                console.log(data);
                if(response.ok){
                    localStorage.setItem('accessToken',data.accessToken);
                    localStorage.setItem('refreshToken',data.refreshToken);
                }else{
                    alert(data.message);
                }
            } catch (error) {
                alert(error);
            }
        }
        kakaoLoginToBackend();
    },[])

    return 
    <></>
}
```

백엔드에서 API  처리 

1. req.body에서 값을 가져온다.
2. 카카오측에 보낼 데이터의 틀을 구성
3. safeurl 방식을 사용하기 위해 각 데이터들의 값을 ‘key=value’의 구조로 인코딩한다.
4. 다듬은 데이터를 req.body 에 담아서 보낸다
5. 보내면  카카오에서 access_token , refresh_token 등을 돌려준다.

```jsx
export const kakaoLogin = async (req,res) => {
  console.log(req.body);
  const   code   = req.body.ACCESS_KEY;
  if(!code){
    console.log('액세스 키가 없습니다.')
    return res.status(400).json({message : 'ACCESS_KEY가 필요합니다.'});
  } 

  const data = {
    grant_type : 'authorization_code',
    client_id :  'Rest_api_key',
    code,
  }

  const queryString = Object.keys(data)
    .map(key => encodeURIComponent(key) + '=' + encodeURIComponent(data[key]))
    .join('&');

  try {
    const getKakaoToken = await fetch(`https://kauth.kakao.com/oauth/token` , {
      method : 'POST',
      headers : {
        'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8',
      },
      body : queryString
    }
    )

    const Token = await getKakaoToken.json();

    if(getKakaoToken.ok){
      console.log(Token);
    }else{
      console.error('카카오 API 요청 실패 : ', Token);
    }

  } catch(error){
    console.log(error);
  }

}

```
